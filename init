if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  echo "This script must be sourced, not run directly." 1>&2
  exit 1
elif [ -z "$PERLBREW_ROOT" ]; then
  echo "Must be run under perlbrew."
  return 1
fi

export HELPERS_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export HELPER_ROOT="$HELPERS_ROOT"

. "$HELPERS_ROOT/lib/debug.sh"

export SYSTEM_CORES=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu || echo 1)
MODERN_PERL="$(
  for perl in "$PERLBREW_ROOT/perls/"*/bin/perl; do
    "$perl" -MConfig -le'
      print(($]*1000000)." ".($^X=~m{/}?$^X:$Config{perlpath}))
        unless ($]*1000) % 2;
    '
  done |
  sort -n |
  tail -1 |
  cut -c9-
)"
[ -z "$MODERN_PERL" ] && MODERN_PERL="$(which perl)"
export MODERN_PERL="env PERL5LIB= $MODERN_PERL"

[ -z "$AUTHOR_TESTING"  ] && export AUTHOR_TESTING=1
[ -z "$SPLIT_BUILD"     ] && export SPLIT_BUILD=1
[ -z "$COVERAGE"        ] && export COVERAGE=0
[ -z "$PERL_AUTOINSTALL_PREFER_CPAN" ]  && export PERL_AUTOINSTALL_PREFER_CPAN=1
[ -z "$PERL_MM_USE_DEFAULT" ]           && export PERL_MM_USE_DEFAULT=1
[ -z "$NONINTERACTIVE_TESTING" ]        && export NONINTERACTIVE_TESTING=1

# work around potential quoting issues in .travis.yml
[[ "$TRAVIS_PERL_VERSION" =~ ^5\.[1-4]$ ]] && TRAVIS_PERL_VERSION+="0"

function build-dist {
  export BUILD_DIR="$(pwd)/build_dir"
  $HELPERS_ROOT/bin/build-dist "$BUILD_DIR"
}

function local-lib {
  eval "$($HELPERS_ROOT/bin/local-lib "$@")"
}

function build-perl {
  local TRAVIS_PERL_VERSION="$TRAVIS_PERL_VERSION"
  if [[ ( "$TRAVIS_PERL_VERSION" =~ ^5\.6[.-] || \
          "$TRAVIS_PERL_VERSION" =~ ^5\.6$ ) &&
        ! "$TRAVIS_PERL_VERSION" =~ @ ]]; then
    TRAVIS_PERL_VERSION="$TRAVIS_PERL_VERSION@base-5.6"
  fi
  $HELPERS_ROOT/bin/build-perl "$TRAVIS_PERL_VERSION" || return 1
  if [ "${TRAVIS_PERL_VERSION/@*/}" == "system" ]; then
    perlbrew off
    if [ "${TRAVIS_PERL_VERSION/*@/}" != "$TRAVIS_PERL_VERSION" ]; then
      local-lib "${TRAVIS_PERL_VERSION/*@/}"
    fi
  else
    perlbrew use "$TRAVIS_PERL_VERSION" || return 1
  fi
  if [ "$SPLIT_BUILD" == "0" ]; then
    MODERN_PERL="env PERL5LIB= $(which perl)"
  fi
  if [ "$(perl -e'print int $]*1000')" -lt 5008 ]; then
    local pver="$(perl -e'printf "%.0f.%.0f.%.0f\n", int($]), ($] - int $])*1000, ($]*1000 - int($]*1000))*1_000')"
    CPAN_MIRROR="http://cp${pver}an.barnyard.co.uk/"
  fi
}

function cpan-install {
  $HELPERS_ROOT/bin/cpan-install "$@"
}

function coverage-setup {
  [ "$COVERAGE" -eq 0 ] && return
  cover -delete -silent
  export HARNESS_PERL_SWITCHES='-MDevel::Cover=-ignore,^x?t/,-blib,0'
}

function _coverage-opts {
  local cover_opts
  if perl -mDevel::Cover::Report::Coveralls -e1 2>/dev/null; then
    cover_opts="$cover_opts -report coveralls"
  fi
  echo "$cover_opts"
}
function coverage-report {
  [ "$COVERAGE" -eq 0 ] && return
  cover "$@" $(_coverage-opts)
}

function test-dirs {
  local TEST_DIRS='t'
  if [ "$AUTHOR_TESTING" -ne 0 ] && [ -d xt ]; then
    TEST_DIRS="$TEST_DIRS xt"
  fi
  echo "$TEST_DIRS"
}

function test-files {
  local files="$(find $(test-dirs) -name '*.t' | sort)"
  if [ -n "$TEST_PARTITION" ]; then
    if [ -z "$TEST_PARTITIONS" ]; then
      echo "TEST_PARTITIONS required with TEST_PARTITION option" 1>&2
      return 1
    elif [ "$TEST_PARTITION" -lt 1 ] || [ "$TEST_PARTITION" -gt "$TEST_PARTITIONS" ]; then
      echo "TEST_PARTITION must be between 1 and TEST_PARTITIONS ($TEST_PARTITIONS)" 1>&2
      return 1
    fi
    local file_count=$(wc -l <<<"$files")
    local partition_size="$(( (file_count + TEST_PARTITIONS - 1) / TEST_PARTITIONS ))"
    local partition_start="$(( (TEST_PARTITION - 1) * partition_size ))"
    files="$(tail -$((file_count - partition_start)) <<<"$files" | head -$partition_size)"
  fi
  echo "$files"
}

function test-jobs {
  echo "$(( COVERAGE ? 1 : SYSTEM_CORES + 1))"
}

function setup-auto {
  . "$HELPERS_ROOT/lib/auto.bash"
  setup-auto
}

. "$HELPERS_ROOT/lib/prove.bash"

echo "Perl Travis Helpers: $(git --git-dir="$HELPERS_ROOT/.git" describe --all --long HEAD)"

for arg; do
  case "$arg" in
    --auto)
      setup-auto
    ;;
    --perl)
      build-perl
      perl -V
    ;;
    --debug)
      export HELPERS_DEBUG=1
    ;;
    *)
      echo "Invalid argument $arg!" 1>&2
      return 1
    ;;
  esac
done

# vim: ft=sh
